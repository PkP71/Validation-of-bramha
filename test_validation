from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager
from web3 import Web3
import time

driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))

driver.get("https://console.brahma.fi")

connect_wallet_button = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Connect Wallet')]"))
)
connect_wallet_button.click()

web3 = Web3(Web3.HTTPProvider("https://arbitrum.llamarpc.com/"))
private_key = "0x56ec2116b33eefed4e499d02f8f6f2bdb76b67d53406923e9aa9378dd1aa2fdc"
account = web3.eth.account.from_key(private_key)

if not w3.isConnected():
    raise Exception("Failed to connect to Arbitrum network")

account = w3.eth.account.privateKeyToAccount(private_key)

print(f"Connected to Arbitrum network with account: {account.address}")

if (typeof window.ethereum !== 'undefined') {{
    window.ethereum = {{
        isMetaMask: true,
        request: async (args) => {{
            if (args.method === 'eth_requestAccounts') {{
                return ['{account.address}'];
            }}
            return w3.currentProvider.send(args.method, args.params);
        }}
    }};
}}

sign_message_button = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Sign Message')]"))
)
sign_message_button.click()

message_element = WebDriverWait(driver, 10).until(
    EC.presence_of_element_located((By.XPATH, "//div[@id='message-to-sign']")) 
)

message = "Message to be signed"
message_hash = web3.keccak(text=message)
signature = web3.eth.account.signHash(message_hash, private_key=private_key)

signature_input = WebDriverWait(driver, 10).until(
    EC.presence_of_element_located((By.XPATH, "//input[@name='signature']"))
)
signature_input.send_keys(signature.signature.hex())

submit_signature_button = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Submit Signature')]"))
)
submit_signature_button.click()

ui_testing_console = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'UI-testing')]"))
)
ui_testing_console.click()

time.sleep(5)

driver.save_screenshot('dashboard_screenshot.png')

ui_testing_text = WebDriverWait(driver, 10).until(
    EC.presence_of_element_located((By.XPATH, "//div[contains(text(), '$0.00')]"))
)
assert ui_testing_text.text == "$0.00", "Text below UI testing does not say '$0.00'"

driver.quit()
